// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(OlxDBContext))]
    [Migration("20240209125138_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Entities.Advert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsNew")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Adverts", t =>
                        {
                            t.HasCheckConstraint("Description_check", "[Description] <> ''");

                            t.HasCheckConstraint("Title_check", "[Title] <> ''");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CityId = 1,
                            Date = new DateTime(2024, 2, 9, 14, 51, 36, 590, DateTimeKind.Local).AddTicks(9416),
                            Description = "Продам телефон Redmi 9A в гарному стані на фото видно що має незначні царини роботі вони не впливають а загалом він як новий .",
                            IsNew = false,
                            Price = 1500m,
                            Title = "Телефон REDMI 9A",
                            UserId = "d1901b2435594da2a255db13fc57509b"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CityId = 1,
                            Date = new DateTime(2024, 2, 9, 14, 51, 36, 593, DateTimeKind.Local).AddTicks(3752),
                            Description = "Ніяких mdm блокувань немає. Ноутбук без жодних дефектів і повний комплект(зарядка, коробка, шнур, макулатура і наклейки). Фото коробки і інших дрібниць не кидаю але все маю, нічого не викидав.",
                            IsNew = false,
                            Price = 99900m,
                            Title = "MacBook M1 Max 14” 64RAM/32GPU/2Tb ssd",
                            UserId = "d1901b2435594da2a255db13fc57509b"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CityId = 3,
                            Date = new DateTime(2024, 2, 9, 14, 51, 36, 593, DateTimeKind.Local).AddTicks(3788),
                            Description = "Смарт тв 32” Samsung UE32T4510AUXUA, Smart TV, WiFi, T2. Телевізор білого кольору, 2021 року виробництва.Телевізор в ідеальному стані та повному комплекті, - пульт, ніжнки. Усе в оригіналі, всі функції перевірені та працюють",
                            IsNew = false,
                            Price = 7900m,
                            Title = "Смарт тв 32” Samsung UE32T4510AUXUA, Smart TV, WiFi, T2",
                            UserId = "c86dc56aedf549f6afe5ceb4d414ebf1"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            CityId = 3,
                            Date = new DateTime(2024, 2, 9, 14, 51, 36, 593, DateTimeKind.Local).AddTicks(3805),
                            Description = "Продам полностью рабочую в отличном состоянии игровую видеокарту AMD RX 5700XT 8GB GDDR6 ASUS.Температура отличная, без каких либо проблем.Проходит тесты ОССТ/FurMark/3DMark без проблем.Потянет большинство популярных игр на хороших настройках графики!",
                            IsNew = false,
                            Price = 8500m,
                            Title = "Как новая! Видеокарта AMD RX 5700XT 8GB GDDR6 Гарантия!",
                            UserId = "c86dc56aedf549f6afe5ceb4d414ebf1"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            CityId = 5,
                            Date = new DateTime(2024, 2, 9, 14, 51, 36, 593, DateTimeKind.Local).AddTicks(3809),
                            Description = "Intel i5 7400, причина продажу апгрейд, комплектаці BOX, любі тести, також можна купити комплектом, дивіться інші мої оголошення)комплектом віддам за 5к",
                            IsNew = false,
                            Price = 1500m,
                            Title = "Процессор intel i5 7400",
                            UserId = "028582c83a914a45b330b5234f4131fb"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            CityId = 5,
                            Date = new DateTime(2024, 2, 9, 14, 51, 36, 593, DateTimeKind.Local).AddTicks(3813),
                            Description = "Продам оперативну пям'ять SAMSUNG 8 GB. SODIMM. DDR-4. 2400 MHz.Планки по 4GB.Були в роботі 1 рік.",
                            IsNew = false,
                            Price = 1000m,
                            Title = "Оперативна пям'ять DDR-4 2400 MHz",
                            UserId = "028582c83a914a45b330b5234f4131fb"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            CityId = 7,
                            Date = new DateTime(2024, 2, 9, 14, 51, 36, 593, DateTimeKind.Local).AddTicks(3816),
                            Description = "Продам тихий игровой компьютер, в хорошем исполнении, с качественных комплектующих, с запасом на апгрейд. Любые проверки и тесты , предпочтительно по месту! Компьютер будет радовать своего нового владельца высокой продуктивностью, и ждет именно вас!",
                            IsNew = false,
                            Price = 14700m,
                            Title = "Silens! Игровой компьютер I5 9400f, z390, gtx 1070 8 gb,16 gb",
                            UserId = "eb05f9548a2c4cf8adcc2be7305fc732"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 8,
                            CityId = 7,
                            Date = new DateTime(2024, 2, 9, 14, 51, 36, 593, DateTimeKind.Local).AddTicks(3819),
                            Description = "Все летает , новые игры без проблем на ультрах! Battlefield 2042, Call of Duty Modern Warfare прошел 3 части!",
                            IsNew = false,
                            Price = 23500m,
                            Title = "Игровой компютер, комплект! GTX 1080, монитор MSI 244 герц!",
                            UserId = "eb05f9548a2c4cf8adcc2be7305fc732"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 9,
                            CityId = 7,
                            Date = new DateTime(2024, 2, 9, 14, 51, 36, 593, DateTimeKind.Local).AddTicks(3822),
                            Description = "Все летает , новые игры без проблем на ультрах! Battlefield 2042, Call of Duty Modern Warfare прошел 3 части!",
                            IsNew = true,
                            Price = 50m,
                            Title = "Зовнішня звукова карта USB 5.1 для комп'ютера та ноутбука (Внешняя)",
                            UserId = "eb05f9548a2c4cf8adcc2be7305fc732"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 10,
                            CityId = 5,
                            Date = new DateTime(2024, 2, 9, 14, 51, 36, 593, DateTimeKind.Local).AddTicks(3826),
                            Description = "Продаю свою GoPro 10 так як перейшов на новішу модель . Завжди була в захисних склах і у захиснобу силіконовому чохлі , не топилась (Використовувалась як влогова камера ) можлива зустріч у Києві (правий берег ) або Олх доставка/наложка Торг !!!",
                            IsNew = true,
                            Price = 8000m,
                            Title = "Пртдам Gopro 10 black в дуже горошому стані !!!",
                            UserId = "028582c83a914a45b330b5234f4131fb"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories", t =>
                        {
                            t.HasCheckConstraint("Category_check", "[Name] <> ''");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Телефони"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ноутбуки"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Телевізори"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Відеокарти"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Процессори"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Оперативна пам'ять"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Компьютери"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Монитори"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Звукові карти"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Екшн-камери"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cities", t =>
                        {
                            t.HasCheckConstraint("Name_check", "[Name] <> ''");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Київ"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Харків"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Одеса"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Дніпро"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Запоріжжя"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Кривий Ріг"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Mиколаїв"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Луганськ"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Вінниця"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Чернігів"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdvertId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.ToTable("Images", t =>
                        {
                            t.HasCheckConstraint("Name_check", "[Name] <> ''")
                                .HasName("Name_check1");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdvertId = 1,
                            Name = "046a6c9cbe3948a388001eff7c842786.webp"
                        },
                        new
                        {
                            Id = 2,
                            AdvertId = 1,
                            Name = "6c54c58f313c46b8b08fb276cd89ede1.webp"
                        },
                        new
                        {
                            Id = 3,
                            AdvertId = 1,
                            Name = "07a281155d454adb81ad4b170fbd0a03.webp"
                        },
                        new
                        {
                            Id = 4,
                            AdvertId = 2,
                            Name = "a366c4b673c4466aae1799e4b417b19b.webp"
                        },
                        new
                        {
                            Id = 5,
                            AdvertId = 2,
                            Name = "5f3b586ef071461bbcdf7841cf2ff67c.webp"
                        },
                        new
                        {
                            Id = 6,
                            AdvertId = 2,
                            Name = "ba0ff206dacc47d6956d606aef5edd5d.webp"
                        },
                        new
                        {
                            Id = 7,
                            AdvertId = 3,
                            Name = "f2855d828be54f93acf0485d7b874cdb.webp"
                        },
                        new
                        {
                            Id = 8,
                            AdvertId = 3,
                            Name = "844edaa8c7b8427b9d2b56063ce8977c.webp"
                        },
                        new
                        {
                            Id = 9,
                            AdvertId = 3,
                            Name = "54b271dc78fe427fae3a68f07540a8ea.webp"
                        },
                        new
                        {
                            Id = 10,
                            AdvertId = 4,
                            Name = "c81082a052484beb8699ff467d1122dc.webp"
                        },
                        new
                        {
                            Id = 11,
                            AdvertId = 4,
                            Name = "2b69dadd1dcd40eb94ecc40bd8e66d31.webp"
                        },
                        new
                        {
                            Id = 12,
                            AdvertId = 4,
                            Name = "c9e78a957e84442e9cf0915167d62add.webp"
                        },
                        new
                        {
                            Id = 13,
                            AdvertId = 5,
                            Name = "d90a8e5655204c0eb035e382c8a293a3.webp"
                        },
                        new
                        {
                            Id = 14,
                            AdvertId = 5,
                            Name = "d7229686d2444bf7aad0f9f22b5c671a.webp"
                        },
                        new
                        {
                            Id = 15,
                            AdvertId = 5,
                            Name = "fff47682d2db4df9a0a51ac6288eb881.webp"
                        },
                        new
                        {
                            Id = 16,
                            AdvertId = 6,
                            Name = "a165f34c4bcf4de28ac3df3e670217d6.webp"
                        },
                        new
                        {
                            Id = 17,
                            AdvertId = 6,
                            Name = "7d6097e652cf44b5a5298d1e94db142c.webp"
                        },
                        new
                        {
                            Id = 18,
                            AdvertId = 7,
                            Name = "3ba07c21e7b44ef993412fd0b40c3385.webp"
                        },
                        new
                        {
                            Id = 19,
                            AdvertId = 7,
                            Name = "0af4ad7eb0a24f45b0008090b1b0a3f6.webp"
                        },
                        new
                        {
                            Id = 20,
                            AdvertId = 7,
                            Name = "90cc095ed7134cc78c6af6e2f38b8403.webp"
                        },
                        new
                        {
                            Id = 21,
                            AdvertId = 8,
                            Name = "2d49a4fb86c74a79bff1bcedcf8aae24.webp"
                        },
                        new
                        {
                            Id = 22,
                            AdvertId = 8,
                            Name = "a92a25d946284f70bfb93866233f8c88.webp"
                        },
                        new
                        {
                            Id = 23,
                            AdvertId = 8,
                            Name = "f2f938f084374eebb76be6436e689714.webp"
                        },
                        new
                        {
                            Id = 24,
                            AdvertId = 9,
                            Name = "dc521bca678948cca942fa4b029c0905.webp"
                        },
                        new
                        {
                            Id = 25,
                            AdvertId = 10,
                            Name = "eafe376a8c994ac282c37a12e8f989c3.webp"
                        },
                        new
                        {
                            Id = 26,
                            AdvertId = 10,
                            Name = "75efa1d600fd4e0eb976ab4dddcdacb7.webp"
                        },
                        new
                        {
                            Id = 27,
                            AdvertId = 10,
                            Name = "57e5aec69d234333bdc7625a54f96945.webp"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f66e492517d7414495e988c4c50fd107",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "0036cc7e-63c5-4acf-bade-cd7d21942b7c",
                            Email = "Admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Петро",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPTQxZXOxEuaTzOosMeQTyyUd5AcsqyZjxgCDNF2qZHTOqc2W2JJwdOkeQ6QzUA+aw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "663a0d45-21b3-4d66-a29d-0b383b3e1fad",
                            Surname = "Левак",
                            TwoFactorEnabled = false,
                            UserName = "Admin@gmail.com"
                        },
                        new
                        {
                            Id = "d1901b2435594da2a255db13fc57509b",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c280654d-2598-48a4-bd28-5210a1267d0e",
                            Email = "User1@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Iван",
                            NormalizedUserName = "USER1@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOE6sngfkygBsH4rNWOXXIP0Xw22W7K11+E3KVkZBC32XrXWHXqgw1rM2nq/aYaUQw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6e0e67cb-beb6-4e5c-adf5-d44221929ec9",
                            Surname = "Калита",
                            TwoFactorEnabled = false,
                            UserName = "User1@gmail.com"
                        },
                        new
                        {
                            Id = "c86dc56aedf549f6afe5ceb4d414ebf1",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4e34c77f-c1dd-4e2a-99ed-6e4f137ff680",
                            Email = "User2@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Петро",
                            NormalizedUserName = "USER2@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEFlKVIGMpy3WIM6Cx0Lobxy9rJDkFRLzhK8zfkkmwBdlOOzLrvcY/Dy9DuuEBk9/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fea0bad2-1716-46b3-b24e-54849d4311d5",
                            Surname = "Дякуленко",
                            TwoFactorEnabled = false,
                            UserName = "User2@gmail.com"
                        },
                        new
                        {
                            Id = "028582c83a914a45b330b5234f4131fb",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "5ac23043-20e1-40a4-a3de-193fff251a60",
                            Email = "User3@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Олег",
                            NormalizedUserName = "USER3@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJmVAZHTQE9Z56KG4oKeZHI2Gea+8QhTyIMOc+ETNMPZl/HWDUbcd6JMMg4nAB3owA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9ad349ef-18aa-4b93-98de-35573b045835",
                            Surname = "Панасенко",
                            TwoFactorEnabled = false,
                            UserName = "User3@gmail.com"
                        },
                        new
                        {
                            Id = "eb05f9548a2c4cf8adcc2be7305fc732",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "547bb558-7ac8-45fb-8a57-bf0098dd216f",
                            Email = "User4@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Тимофій",
                            NormalizedUserName = "USER4@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIP+Lpq+he9dQ2xk83vUvalgDNvRa3pDofl+aL7LBQK8bbyIgklA4VbjtOKttXtbXg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e7b386d3-a627-4af5-92fc-5773f633ac98",
                            Surname = "Гнатенко",
                            TwoFactorEnabled = false,
                            UserName = "User4@gmail.com"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.UserFavouriteAdvert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdvertId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFavouriteAdverts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "15b04d9eff654d8d966a172db59e2722",
                            ConcurrencyStamp = "15b04d9eff654d8d966a172db59e2722",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "59139483f3d1417db1efee50d14b6a7f",
                            ConcurrencyStamp = "59139483f3d1417db1efee50d14b6a7f",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "f66e492517d7414495e988c4c50fd107",
                            RoleId = "15b04d9eff654d8d966a172db59e2722"
                        },
                        new
                        {
                            UserId = "d1901b2435594da2a255db13fc57509b",
                            RoleId = "59139483f3d1417db1efee50d14b6a7f"
                        },
                        new
                        {
                            UserId = "c86dc56aedf549f6afe5ceb4d414ebf1",
                            RoleId = "59139483f3d1417db1efee50d14b6a7f"
                        },
                        new
                        {
                            UserId = "028582c83a914a45b330b5234f4131fb",
                            RoleId = "59139483f3d1417db1efee50d14b6a7f"
                        },
                        new
                        {
                            UserId = "eb05f9548a2c4cf8adcc2be7305fc732",
                            RoleId = "59139483f3d1417db1efee50d14b6a7f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.Advert", b =>
                {
                    b.HasOne("DataAccess.Entities.Category", "Category")
                        .WithMany("Adverts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.City", "City")
                        .WithMany("Adverts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.User", "User")
                        .WithMany("Adverts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.Image", b =>
                {
                    b.HasOne("DataAccess.Entities.Advert", "Advert")
                        .WithMany("Images")
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advert");
                });

            modelBuilder.Entity("DataAccess.Entities.UserFavouriteAdvert", b =>
                {
                    b.HasOne("DataAccess.Entities.Advert", "Advert")
                        .WithMany("UserFavouriteAdverts")
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.User", "User")
                        .WithMany("UserFavouriteAdverts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Advert");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.Advert", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("UserFavouriteAdverts");
                });

            modelBuilder.Entity("DataAccess.Entities.Category", b =>
                {
                    b.Navigation("Adverts");
                });

            modelBuilder.Entity("DataAccess.Entities.City", b =>
                {
                    b.Navigation("Adverts");
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.Navigation("Adverts");

                    b.Navigation("UserFavouriteAdverts");
                });
#pragma warning restore 612, 618
        }
    }
}
